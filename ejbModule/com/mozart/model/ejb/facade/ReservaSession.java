package com.mozart.model.ejb.facade;

import java.sql.Timestamp;
import java.util.Date;
import java.util.List;

import javax.ejb.Remote;

import com.mozart.model.ejb.entity.EmpresaHotelEJB;
import com.mozart.model.ejb.entity.HotelEJB;
import com.mozart.model.ejb.entity.ReservaApartamentoEJB;
import com.mozart.model.ejb.entity.ReservaApartamentoEJBPK;
import com.mozart.model.ejb.entity.ReservaEJB;
import com.mozart.model.ejb.entity.ReservaMidiaEJB;
import com.mozart.model.exception.MozartSessionException;
import com.mozart.model.vo.ApartamentoVO;
import com.mozart.model.vo.BloqueioGestaoVO;
import com.mozart.model.vo.BloqueioVO;
import com.mozart.model.vo.DisponibilidadeAptoGestaoBloqueioVO;
import com.mozart.model.vo.DisponibilidadeGdsVO;
import com.mozart.model.vo.EmpresaGrupoLancamentoVO;
import com.mozart.model.vo.EmpresaHotelVO;
import com.mozart.model.vo.EmpresaRedeVO;
import com.mozart.model.vo.GdsCanalVO;
import com.mozart.model.vo.HospedeVO;
import com.mozart.model.vo.HotelVO;
import com.mozart.model.vo.OcupDispVO;
import com.mozart.model.vo.PagamentoReservaVO;
import com.mozart.model.vo.QuantidadeAptoGestaoBloqueioVO;
import com.mozart.model.vo.ReservaApartamentoDiariaVO;
import com.mozart.model.vo.ReservaApartamentoVO;
import com.mozart.model.vo.ReservaGrupoLancamentoVO;
import com.mozart.model.vo.ReservaMapaOcupacaoVO;
import com.mozart.model.vo.ReservaVO;
import com.mozart.model.vo.RoomListVO;
import com.mozart.model.vo.TarifaApartamentoGestaoBloqueioVO;
import com.mozart.model.vo.TarifaVO;
import com.mozart.model.vo.TipoApartamentoVO;
import com.mozart.model.vo.TipoDiariaVO;

@Remote
public abstract interface ReservaSession {
	public static final String QUERY_PESQUISARRESERVAS = "SELECT *\nFROM (\nSELECT DISTINCT RESERVA_APARTAMENTO.ID_RESERVA_APARTAMENTO, RESERVA.APAGADA, \nRESERVA.ID_RESERVA, RESERVA.ID_RESERVA_BLOQUEIO,MIN(room_list.id_room_list),MAX(TIPO_APARTAMENTO.ID_TIPO_APARTAMENTO) ID_TIPO_APARTAMENTO, \nRESERVA_APARTAMENTO.QTDE_CRIANCA,RESERVA_APARTAMENTO.ADICIONAL, \nMIN(trim(HOSPEDE.NOME_HOSPEDE) || ' ' || trim(HOSPEDE.SOBRENOME_HOSPEDE)) NOME_HOSPEDE, RESERVA_APARTAMENTO.DATA_ENTRADA, \nRESERVA_APARTAMENTO.DATA_SAIDA, RESERVA.BLOQUEIO,RESERVA_APARTAMENTO.QTDE_PAX, \nRESERVA_APARTAMENTO.QTDE_APARTAMENTO QTDE_APART, EMPRESA_REDE.NOME_FANTASIA,RESERVA.CONTATO, RESERVA.CONFIRMA, \nSUBSTR(RESERVA.OBSERVACAO,1,150) OBSERVACAO,RESERVA.FORMA_RESERVA, RESERVA.TELEFONE_CONTATO, max(RESERVA_APARTAMENTO.QTDE_CHECKIN) QTDE_CHECKIN, \n/*RESERVA.CONTATO, */TIPO_APARTAMENTO.FANTASIA, \nDECODE(RESERVA.TIPO_PENSAO,'SIM','CM',DECODE(RESERVA.TIPO_PENSAO,'NAO','SC',RESERVA.TIPO_PENSAO)) TIPO_PENSAO,\nRESERVA_APARTAMENTO.QTDE_APARTAMENTO QTDE_APARTAMENTO,RESERVA_APARTAMENTO.TARIFA,\nMIN(TIPO_HOSPEDE.TIPO_HOSPEDE) TIPO_HOSPEDE, RESERVA.VALOR_TOTAL, EMPRESA_REDE.ID_EMPRESA,\nDECODE(SUM(RESERVA_APARTAMENTO.QTDE_CHECKIN),SUM(RESERVA_APARTAMENTO.QTDE_APARTAMENTO),'S','N') CHECKIN, \nDECODE(reserva_apartamento.qtde_checkin,1,'Sim',0,'Não') CHECKINSIMNAO,\nHT.SIGLA,GETAPARTAMENTO(RESERVA_APARTAMENTO.ID_APARTAMENTO) NUM_APTO,RESERVA.NOME_GRUPO,RESERVA.ID_PERMUTA, RESERVA.DATA_RESERVA,\nDECODE(RESERVA.ID_USUARIO_WEB,NULL,'Não','Sim') CAMPO_WEB,CENTRAL_RESERVAS.NOME_FANTASIA NOME_FANTASIA_CENTRAL_RESERVAS,RESERVA.RESERVA_JAVA,\nDECODE( greatest( RESERVA_APARTAMENTO.DATA_ENTRADA, CONTROLA_DATA.FRONT_OFFICE ), RESERVA_APARTAMENTO.DATA_ENTRADA, 'Não', 'Sim') NOSHOW, NVL(CHECKIN.CHECKOUT,'N') CHECKOUT,\nDECODE (APARTAMENTO.NUM_APARTAMENTO,NULL,'', APARTAMENTO.NUM_APARTAMENTO || ' ' || TIPO_APARTAMENTO.FANTASIA || ' ' || APARTAMENTO.STATUS) CARACTERISTICA,\n(RESERVA.ID_RESERVA|| ',' || RESERVA_APARTAMENTO.ID_RESERVA_APARTAMENTO) IDRESERVAIDRESERVAAPARTAMENTO, \n RESERVA.ID_GDS,\n ERGDS.NOME_FANTASIA ADM,\n RESERVA_APARTAMENTO.TOTAL_TARIFA FROM RESERVA_APARTAMENTO, RESERVA, empresa_rede, HOTEL HT, TIPO_APARTAMENTO,HOSPEDE , TIPO_HOSPEDE, ROOM_LIST,\nCENTRAL_RESERVAS, CONTROLA_DATA, CHECKIN,APARTAMENTO,\n GDS,\n EMPRESA_REDE ERGDS \n\nWHERE RESERVA.ID_EMPRESA = EMPRESA_REDE.ID_EMPRESA\nAND CENTRAL_RESERVAS.ID_CENTRAL_RESERVAS(+) = RESERVA.ID_CENTRAL_RESERVAS\nAND CHECKIN.ID_RESERVA_APARTAMENTO(+) = RESERVA_APARTAMENTO.ID_RESERVA_APARTAMENTO\nAND RESERVA_APARTAMENTO.ID_APARTAMENTO = APARTAMENTO.ID_APARTAMENTO(+)\nAND CONTROLA_DATA.ID_HOTEL = RESERVA.ID_HOTEL\nAND RESERVA_APARTAMENTO.ID_RESERVA_APARTAMENTO = ROOM_LIST.ID_RESERVA_APARTAMENTO(+)\nAND HOSPEDE.ID_TIPO_HOSPEDE = TIPO_HOSPEDE.ID_TIPO_HOSPEDE(+)\nAND HOSPEDE.ID_HOSPEDE(+) = ROOM_LIST.ID_HOSPEDE\t\nAND EMPRESA_REDE.ID_REDE_HOTEL =  HT.ID_REDE_HOTEL\nAND RESERVA_APARTAMENTO.ID_RESERVA = RESERVA.ID_RESERVA\nAND RESERVA_APARTAMENTO.ID_HOTEL = RESERVA.ID_HOTEL\nAND RESERVA_APARTAMENTO.ID_HOTEL = TIPO_APARTAMENTO.ID_HOTEL\nAND RESERVA_APARTAMENTO.ID_TIPO_APARTAMENTO = TIPO_APARTAMENTO.ID_TIPO_APARTAMENTO\nAND HT.ID_HOTEL = RESERVA.ID_HOTEL \n AND RESERVA.id_gds = gds.id_gds(+) \n AND gds.id_empresa = ERGDS.id_empresa(+) \n AND RESERVA_APARTAMENTO.QTDE_APARTAMENTO > 0\n";
	public static final String QUERY_PESQUISARBLOQUEIO = "SELECT *\nFROM (\nSELECT DISTINCT RESERVA_APARTAMENTO.ID_RESERVA_APARTAMENTO, RESERVA.APAGADA, \nRESERVA.ID_RESERVA, RESERVA.ID_RESERVA_BLOQUEIO,MIN(room_list.id_room_list),MAX(TIPO_APARTAMENTO.ID_TIPO_APARTAMENTO) ID_TIPO_APARTAMENTO, \nRESERVA_APARTAMENTO.QTDE_CRIANCA,RESERVA_APARTAMENTO.ADICIONAL, \nMIN(trim(HOSPEDE.NOME_HOSPEDE) || ' ' || trim(HOSPEDE.SOBRENOME_HOSPEDE)) NOME_HOSPEDE, RESERVA_APARTAMENTO.DATA_ENTRADA, \nRESERVA_APARTAMENTO.DATA_SAIDA, RESERVA.BLOQUEIO,RESERVA_APARTAMENTO.QTDE_PAX, \nRESERVA_APARTAMENTO.QTDE_APARTAMENTO QTDE_APART, EMPRESA_REDE.NOME_FANTASIA,RESERVA.CONTATO, RESERVA.CONFIRMA, \nSUBSTR(RESERVA.OBSERVACAO,1,150) OBSERVACAO,RESERVA.FORMA_RESERVA, RESERVA.TELEFONE_CONTATO, max(RESERVA_APARTAMENTO.QTDE_CHECKIN) QTDE_CHECKIN, \n/*RESERVA.CONTATO, */TIPO_APARTAMENTO.FANTASIA, \nDECODE(RESERVA.TIPO_PENSAO,'SIM','CM',DECODE(RESERVA.TIPO_PENSAO,'NAO','SC',RESERVA.TIPO_PENSAO)) TIPO_PENSAO,\nRESERVA_APARTAMENTO.QTDE_APARTAMENTO QTDE_APARTAMENTO,RESERVA_APARTAMENTO.TARIFA,\nMIN(TIPO_HOSPEDE.TIPO_HOSPEDE) TIPO_HOSPEDE, RESERVA.VALOR_TOTAL, EMPRESA_REDE.ID_EMPRESA,\nDECODE(SUM(RESERVA_APARTAMENTO.QTDE_CHECKIN),SUM(RESERVA_APARTAMENTO.QTDE_APARTAMENTO),'S','N') CHECKIN, \nDECODE(reserva_apartamento.qtde_checkin,1,'Sim',0,'Não') CHECKINSIMNAO,\nHT.SIGLA,GETAPARTAMENTO(RESERVA_APARTAMENTO.ID_APARTAMENTO) NUM_APTO,RESERVA.NOME_GRUPO,RESERVA.ID_PERMUTA, RESERVA.DATA_RESERVA,\nDECODE(RESERVA.ID_USUARIO_WEB,NULL,'Não','Sim') CAMPO_WEB,CENTRAL_RESERVAS.NOME_FANTASIA NOME_FANTASIA_CENTRAL_RESERVAS,RESERVA.RESERVA_JAVA,\nDECODE( greatest( RESERVA_APARTAMENTO.DATA_ENTRADA, CONTROLA_DATA.FRONT_OFFICE ), RESERVA_APARTAMENTO.DATA_ENTRADA, 'Não', 'Sim') NOSHOW, NVL(CHECKIN.CHECKOUT,'N') CHECKOUT,\nDECODE (APARTAMENTO.NUM_APARTAMENTO,NULL,'', APARTAMENTO.NUM_APARTAMENTO || ' ' || TIPO_APARTAMENTO.FANTASIA || ' ' || APARTAMENTO.STATUS) CARACTERISTICA,\n(RESERVA.ID_RESERVA|| ',' || RESERVA_APARTAMENTO.ID_RESERVA_APARTAMENTO) IDRESERVAIDRESERVAAPARTAMENTO, \n RESERVA.ID_GDS,\n ERGDS.NOME_FANTASIA ADM,\n RESERVA_APARTAMENTO.TOTAL_TARIFA FROM RESERVA_APARTAMENTO, RESERVA, empresa_rede, HOTEL HT, TIPO_APARTAMENTO,HOSPEDE , TIPO_HOSPEDE, ROOM_LIST,\nCENTRAL_RESERVAS, CONTROLA_DATA, CHECKIN,APARTAMENTO,\n GDS,\n EMPRESA_REDE ERGDS \n\nWHERE RESERVA.ID_EMPRESA = EMPRESA_REDE.ID_EMPRESA\nAND CENTRAL_RESERVAS.ID_CENTRAL_RESERVAS(+) = RESERVA.ID_CENTRAL_RESERVAS\nAND CHECKIN.ID_RESERVA_APARTAMENTO(+) = RESERVA_APARTAMENTO.ID_RESERVA_APARTAMENTO\nAND RESERVA_APARTAMENTO.ID_APARTAMENTO = APARTAMENTO.ID_APARTAMENTO(+)\nAND CONTROLA_DATA.ID_HOTEL = RESERVA.ID_HOTEL\nAND RESERVA_APARTAMENTO.ID_RESERVA_APARTAMENTO = ROOM_LIST.ID_RESERVA_APARTAMENTO(+)\nAND HOSPEDE.ID_TIPO_HOSPEDE = TIPO_HOSPEDE.ID_TIPO_HOSPEDE(+)\nAND HOSPEDE.ID_HOSPEDE(+) = ROOM_LIST.ID_HOSPEDE\t\nAND EMPRESA_REDE.ID_REDE_HOTEL =  HT.ID_REDE_HOTEL\nAND RESERVA_APARTAMENTO.ID_RESERVA = RESERVA.ID_RESERVA\nAND RESERVA_APARTAMENTO.ID_HOTEL = RESERVA.ID_HOTEL\nAND RESERVA_APARTAMENTO.ID_HOTEL = TIPO_APARTAMENTO.ID_HOTEL\nAND RESERVA_APARTAMENTO.ID_TIPO_APARTAMENTO = TIPO_APARTAMENTO.ID_TIPO_APARTAMENTO\nAND HT.ID_HOTEL = RESERVA.ID_HOTEL \n AND RESERVA.id_gds = gds.id_gds(+) \n AND gds.id_empresa = ERGDS.id_empresa(+) \n AND RESERVA_APARTAMENTO.QTDE_APARTAMENTO > 0\n";
	// TODO: (ID/Conta Corrente) 
//	public static final String QUERY_OBTER_EMPRESA = "SELECT EH.ID_EMPRESA,EH.ID_HOTEL,EH.ID_REDE_HOTEL,TIPO_PENSAO,DESCONTO,COMISSAO,PRAZO_PAGAMENTO,CALCULA_ISS, \nCALCULA_TAXA, CALCULA_ROOMTAX,CONTA_CORRENTE,ID_TIPO_EMPRESA,ER.ENDERECO_COBRANCA,ER.ID_CIDADE,C.CIDADE, \nER.CEP, ER.BAIRRO,TIPO_EMPRESA,EH.ID_PROMOTOR,ACREDITO,ER.CREDITO||'-'||ER.NOME_FANTASIA||'-'||E.CGC NOME_FANTASIA,EH.ISS_RETENCAO,\nEH.VALOR_CREDITO,EH.ID_CORPORATE,ER.CREDITO, EH.CALCULA_SEGURO\nFROM EMPRESA_HOTEL EH, CIDADE C, EMPRESA_REDE ER, HOTEL H, EMPRESA E\nWHERE ER.ID_CIDADE = C.ID_CIDADE\nAND ER.ID_REDE_HOTEL =  H.ID_REDE_HOTEL\nAND ER.ID_EMPRESA =EH.ID_EMPRESA\nAND E.ID_EMPRESA = EH.ID_EMPRESA\nAND H.ID_HOTEL = EH.ID_HOTEL\n";
	public static final String QUERY_OBTER_EMPRESA = "SELECT EH.ID_EMPRESA,EH.ID_HOTEL,EH.ID_REDE_HOTEL,TIPO_PENSAO,DESCONTO,COMISSAO,PRAZO_PAGAMENTO,CALCULA_ISS, \nCALCULA_TAXA, CALCULA_ROOMTAX, ID_CONTA_CORRENTE, ID_TIPO_EMPRESA,ER.ENDERECO_COBRANCA,ER.ID_CIDADE,C.CIDADE, \nER.CEP, ER.BAIRRO,TIPO_EMPRESA,EH.ID_PROMOTOR,ACREDITO,ER.CREDITO||'-'||ER.NOME_FANTASIA||'-'||E.CGC NOME_FANTASIA,EH.ISS_RETENCAO,\nEH.VALOR_CREDITO,EH.ID_CORPORATE,ER.CREDITO, EH.CALCULA_SEGURO\nFROM EMPRESA_HOTEL EH, CIDADE C, EMPRESA_REDE ER, HOTEL H, EMPRESA E\nWHERE ER.ID_CIDADE = C.ID_CIDADE\nAND ER.ID_REDE_HOTEL =  H.ID_REDE_HOTEL\nAND ER.ID_EMPRESA =EH.ID_EMPRESA\nAND E.ID_EMPRESA = EH.ID_EMPRESA\nAND H.ID_HOTEL = EH.ID_HOTEL\n";
	public static final String QUERY_OBTER_TIPO_APARTAMENTO = "    SELECT ID_TIPO_APARTAMENTO, TIPO_APARTAMENTO, FANTASIA, ID_HOTEL, QTDE_PESSOA, DESCRICAO_APARTAMENTO\n    FROM TIPO_APARTAMENTO\n";
	public static final String QUERY_OBTER_TIPO_APARTAMENTO_POR_ID = "    SELECT ID_TIPO_APARTAMENTO, TIPO_APARTAMENTO, FANTASIA, ID_HOTEL, QTDE_PESSOA, DESCRICAO_APARTAMENTO\n    FROM TIPO_APARTAMENTO\n";
	public static final String QUERY_OBTER_TIPO_APARTAMENTO_POR_FANTASIA = "    SELECT ID_TIPO_APARTAMENTO, TIPO_APARTAMENTO, FANTASIA, ID_HOTEL, QTDE_PESSOA, DESCRICAO_APARTAMENTO\n    FROM TIPO_APARTAMENTO\n";
	public static final String QUERY_OBTER_TIPO_DIARIA = "SELECT TP.ID_TIPO_DIARIA, TP.DESCRICAO, TP.PADRAO, TP.ID_REDE_HOTEL\nFROM TIPO_DIARIA TP\nJOIN HOTEL ON (TP.ID_REDE_HOTEL = HOTEL.ID_REDE_HOTEL)";
	public static final String QUERY_OBTER_TIPO_DIARIA_POR_ID = "SELECT TP.ID_TIPO_DIARIA, TP.DESCRICAO, TP.PADRAO, TP.ID_REDE_HOTEL\nFROM TIPO_DIARIA TP\n";
	public static final String QUERY_OBTER_APART_DISP = "SELECT \nA.ID_APARTAMENTO, \nA.ID_HOTEL,A.ID_TIPO_APARTAMENTO, A.NUM_APARTAMENTO, A.AREA, A.STATUS, A.COFAN, A.DATA_ENTRADA, \nA.DATA_SAIDA, A.OBSERVACAO, A.DEPOSITO_ANTECIPADO, A.CARACTERISTICA, A.ID_CAMAREIRA, \nA.CHECKOUT, nvl2(APTO_RES.id_apartamento,1,nvl2(APTO_CHK.id_apartamento,1,0)) ocupado\nFROM APARTAMENTO A, TIPO_APARTAMENTO TA, \n                (SELECT RA.ID_APARTAMENTO\n\t\tFROM RESERVA R, RESERVA_APARTAMENTO RA\n\t\tWHERE R.ID_RESERVA = RA.ID_RESERVA and RA.ID_APARTAMENTO IS NOT NULL\n";
	public static final String QUERY_OBTER_APART_POR_ID = "SELECT \nA.ID_APARTAMENTO, \nA.ID_HOTEL,A.ID_TIPO_APARTAMENTO, A.NUM_APARTAMENTO, A.AREA, A.STATUS, A.COFAN, A.DATA_ENTRADA, \nA.DATA_SAIDA, A.OBSERVACAO, A.DEPOSITO_ANTECIPADO, A.CARACTERISTICA, A.ID_CAMAREIRA, \nA.CHECKOUT, 0 ocupado\nFROM APARTAMENTO A\n";
	public static final String QUERY_OBTER_HOSPEDE_POR_NOME = "SELECT H.ID_HOSPEDE, UPPER(H.NOME_HOSPEDE||' '||H.SOBRENOME_HOSPEDE||NVL2(H.CPF,'-', '')||H.CPF) NOME_HOSPEDE,H.CPF,H.NASCIMENTO,H.PASSAPORTE \n    FROM HOSPEDE H\n";
	public static final String QUERY_OBTER_HOSPEDE_POR_ID = "SELECT H.ID_HOSPEDE, UPPER(H.NOME_HOSPEDE||' '||H.SOBRENOME_HOSPEDE||NVL2(H.CPF,'-', '')||H.CPF) NOME_HOSPEDE,H.CPF,H.NASCIMENTO,H.PASSAPORTE \n    FROM HOSPEDE H\n";
	public static final String QUERY_OBTER_EMPRESA_REDE_POR_ID_E_IDREDE = "SELECT \nID_EMPRESA, ID_REDE_HOTEL, CONTATO, TELEFONE, TELEFONE2, FAX, EMAIL, EMAIL2, TELEX, \nDATA_NASCIMENTO, OBSERVACAO, ID_GRUPO_ECONOMICO, INTERNET, CRS, CREDITO, VALOR_CREDITO, \nDATA_CADASTRO, ID_HOTEL, NOME_FANTASIA, PARTICULAR, ID_CORPORATE, CONTATO2, \nDATA_NASCIMENTO2, ID_PROMOTOR\nFROM EMPRESA_REDE\n";
	public static final String QUERY_OBTER_GRUPO_LANCAMENTO_POR_HOTEL_EMPRESA = "SELECT ID_EMPRESA, ID_IDENTIFICA_LANCAMENTO, QUEM_PAGA, \nID_HOTEL FROM EMPRESA_GRUPO_LANCAMENTO\n";
	public static final String QUERY_OBTER_TIPOS_PAGAMENTO_RESERVA = "SELECT TL.ID_IDENTIFICA_LANCAMENTO, ID_TIPO_LANCAMENTO,  TL.DESCRICAO_LANCAMENTO  \nFROM TIPO_LANCAMENTO TL JOIN IDENTIFICA_LANCAMENTO IL ON (TL.ID_IDENTIFICA_LANCAMENTO = IL.ID_IDENTIFICA_LANCAMENTO) \n";
	public static final String INSERT_RESERVA = "INSERT INTO RESERVA \n(ID_RESERVA, ID_EMPRESA, ID_CENTRAL_RESERVAS, ID_RESERVA_BLOQUEIO, ID_HOTEL, DATA_ENTRADA, DATA_SAIDA, DATA_RESERVA, HORA_RESERVA, DATA_CONFIRMA_BLOQUEIO, BLOQUEIO, DEAD_LINE, CALCULA_ISS, CALCULA_TAXA, CALCULA_ROOMTAX, FORMA_RESERVA, CONTATO, ID_CIDADE_CONTATO, TELEFONE_CONTATO, FAX_CONTATO, EMAIL_CONTATO, OBSERVACAO, NOME_GRUPO, CHECKIN, TIPO_PENSAO, CORTESIA, GRUPO, VALOR_TOTAL, APAGADA, CONFIRMA, FLG_ALCOOLICA, ID_RESERVA_MIDIA, PERMUTA, ID_CORPORATE, ID_USUARIO_WEB, ID_PERMUTA, GARANTENOSHOW, FIDELIDADE, FORMA_PG, RESERVA_JAVA, ALTERANDO, COMISSAO, CALCULA_SEGURO, VALOR_PENSAO, OBSERVACAO_VOUCHER, ID_GDS, ID_RESERVA_GDS)\nVALUES\n(?1, ?2, ?3, ?4, ?5, TRUNC(?6), TRUNC(?7), ?8, ?9, ?10, ?11, ?12, ?13, ?14, ?15, ?16, ?17, ?18, ?19, ?20, ?21, ?22, ?23, ?24, ?25, ?26, ?27, ?28, ?29, ?30, ?31, ?32, ?33, ?34, ?35, ?36, ?37, ?38, ?39, ?40, ?41, ?42, ?43, ?44, ?45, ?46, ?47)";
	public static final String UPDATE_RESERVA = "UPDATE RESERVA SET \n ID_EMPRESA = ?1, ID_CENTRAL_RESERVAS = ?2, ID_RESERVA_BLOQUEIO = ?3, ID_HOTEL = ?4, DATA_ENTRADA = TRUNC(?5),  DATA_SAIDA = TRUNC(?6), DATA_CONFIRMA_BLOQUEIO = ?7, BLOQUEIO = ?8 , DEAD_LINE = ?9 ,  CALCULA_ISS = ?10, CALCULA_TAXA = ?11, CALCULA_ROOMTAX = ?12, FORMA_RESERVA = ?13, CONTATO = ?14, ID_CIDADE_CONTATO = ?15,  TELEFONE_CONTATO = ?16, FAX_CONTATO = ?17, EMAIL_CONTATO = ?18, OBSERVACAO = ?19, NOME_GRUPO = ?20, CHECKIN = ?21,  TIPO_PENSAO = ?22, CORTESIA = ?23, GRUPO = ?24, VALOR_TOTAL = ?25, APAGADA = ?26, CONFIRMA = ?27, FLG_ALCOOLICA = ?28,  ID_RESERVA_MIDIA = ?29, PERMUTA = ?30, ID_CORPORATE = ?31, ID_USUARIO_WEB = ?32, ID_PERMUTA = ?33, GARANTENOSHOW = ?34,  FIDELIDADE = ?35, FORMA_PG = ?36, RESERVA_JAVA = ?37, ALTERANDO = ?38, COMISSAO = ?39, CALCULA_SEGURO = ?40, VALOR_PENSAO = ?41, OBSERVACAO_VOUCHER = ?42  WHERE ID_RESERVA = ?43";
	public static final String INSERT_RESERVA_APARTAMENTO = "INSERT INTO RESERVA_APARTAMENTO\n(ID_RESERVA_APARTAMENTO, ID_TIPO_APARTAMENTO, ID_RESERVA, QTDE_APARTAMENTO, QTDE_CHECKIN, QTDE_PAX, TARIFA, JUSTIFICA_TARIFA, ID_CENTRAL_RESERVAS, ID_HOTEL, TOTAL_TARIFA, ADICIONAL, QTDE_CRIANCA, ID_APARTAMENTO, MASTER, VALOR_PENSAO, DATA_ENTRADA, DATA_SAIDA, CAFE, VALOR_CAFE, MAP, VALOR_MAP, FAP, TARIFA_MANUAL, DATA_MANUAL, ID_TIPO_DIARIA)\nVALUES \n(?1, ?2, ?3, ?4, ?5, ?6, ?7, ?8, ?9, ?10, ?11, ?12, ?13, ?14, ?15, ?16, ?17, ?18, ?19, ?20, ?21, ?22, ?23, ?24, ?25, ?26)";
	public static final String DELETE_RESERVA_APARTAMENTO = "DELETE FROM RESERVA_APARTAMENTO\nWHERE ID_RESERVA =?1 AND QTDE_CHECKIN = 0";
	public static final String INSERT_ROOM_LIST = "INSERT INTO ROOM_LIST\n(ID_ROOM_LIST, ID_CHECKIN, ID_RESERVA, ID_TIPO_HOSPEDE, ID_HOTEL, ID_CENTRAL_RESERVAS, ID_HOSPEDE, SEXO, ID_REDE_HOTEL, NOME_HOSPEDE, SOBRENOME_HOSPEDE, ID_TIPO_LANCAMENTO, ID_RESERVA_APARTAMENTO, PRINCIPAL, CHEGOU)\nVALUES\n(?1, ?2, ?3, ?4, ?5, ?6, ?7, ?8, ?9, ?10, ?11, ?12, ?13, ?14, ?15)";
	public static final String DELETE_ROOM_LIST = "DELETE FROM ROOM_LIST\nWHERE ID_RESERVA = ?1 AND ID_CHECKIN IS NULL";
	public static final String INSERT_RESERVA_APARTAMENTO_DIARIA = "INSERT INTO RESERVA_APARTAMENTO_DIARIA\n(DATA, ID_HOTEL, ID_RESERVA, ID_RESERVA_APARTAMENTO, TARIFA, JUSTIFICA_TARIFA, ID_MOEDA, ID_RESERVA_APARTAMENTO_DIARIA)\nVALUES \n(?1, ?2, ?3, ?4, ?5, ?6, ?7, ?8)";
	public static final String DELETE_RESERVA_APARTAMENTO_DIARIA = "DELETE FROM RESERVA_APARTAMENTO_DIARIA\nWHERE ID_RESERVA = ?1";
	public static final String INSERT_PAGAMENTO_RESERVA = "INSERT INTO PAGAMENTO_RESERVA\n(ID_PAGAMENTO_RESERVA, ID_CARTAO_CREDITO, ID_TIPO_LANCAMENTO, ID_RESERVA, VALOR, CONFIRMA, DATA_CONFIRMA, NUM_DOCUMENTO, VALIDADE_CARTAO, ID_HOTEL, ID_CENTRAL_RESERVAS, FORMA_PG, COD_SEGURANCA, BANDEIRA, NOME_CARTAO, ID_APARTAMENTO, ID_MOVIMENTO_APARTAMENTO)\nVALUES\n(?1, ?2, ?3, ?4, ?5, ?6, ?7, ?8, ?9, ?10, ?11, ?12, ?13, ?14, ?15, ?16, ?17)";
	public static final String DELETE_PAGAMENTO_RESERVA = "DELETE FROM PAGAMENTO_RESERVA\nWHERE ID_RESERVA = ?1";
	public static final String INSERT_RESERVA_GRUPO_LANCAMENTO = "INSERT INTO RESERVA_GRUPO_LANCAMENTO\n(ID_CENTRAL_RESERVAS, ID_RESERVA, ID_IDENTIFICA_LANCAMENTO, QUEM_PAGA, ID_HOTEL, ID_EMPRESA)\nVALUES\n(?1, ?2, ?3, ?4, ?5, ?6)";
	public static final String DELETE_RESERVA_GRUPO_LANCAMENTO = "DELETE FROM RESERVA_GRUPO_LANCAMENTO\nWHERE ID_RESERVA = ?1";
	public static final String QUERY_RESERVA = "SELECT \nID_RESERVA, ID_EMPRESA, ID_CENTRAL_RESERVAS, ID_RESERVA_BLOQUEIO, ID_HOTEL, DATA_ENTRADA, DATA_SAIDA, DATA_RESERVA, \nHORA_RESERVA, DATA_CONFIRMA_BLOQUEIO, BLOQUEIO, DEAD_LINE, CALCULA_ISS, CALCULA_TAXA, CALCULA_ROOMTAX, \nFORMA_RESERVA, CONTATO, ID_CIDADE_CONTATO, TELEFONE_CONTATO, FAX_CONTATO, EMAIL_CONTATO, OBSERVACAO, NOME_GRUPO, \nCHECKIN, TIPO_PENSAO, CORTESIA, GRUPO, VALOR_TOTAL, APAGADA, CONFIRMA, FLG_ALCOOLICA, ID_RESERVA_MIDIA, PERMUTA, \nID_CORPORATE, ID_USUARIO_WEB, ID_PERMUTA, GARANTENOSHOW, FIDELIDADE, FORMA_PG, RESERVA_JAVA, ALTERANDO, COMISSAO, \nCALCULA_SEGURO, VALOR_PENSAO, OBSERVACAO_VOUCHER\nFROM RESERVA\nWHERE ID_RESERVA = ?1";
	public static final String QUERY_RESERVA_GDS = "SELECT \nID_RESERVA, ID_EMPRESA, ID_CENTRAL_RESERVAS, ID_RESERVA_BLOQUEIO, ID_HOTEL, DATA_ENTRADA, DATA_SAIDA, DATA_RESERVA, \nHORA_RESERVA, DATA_CONFIRMA_BLOQUEIO, BLOQUEIO, DEAD_LINE, CALCULA_ISS, CALCULA_TAXA, CALCULA_ROOMTAX, \nFORMA_RESERVA, CONTATO, ID_CIDADE_CONTATO, TELEFONE_CONTATO, FAX_CONTATO, EMAIL_CONTATO, OBSERVACAO, NOME_GRUPO, \nCHECKIN, TIPO_PENSAO, CORTESIA, GRUPO, VALOR_TOTAL, APAGADA, CONFIRMA, FLG_ALCOOLICA, ID_RESERVA_MIDIA, PERMUTA, \nID_CORPORATE, ID_USUARIO_WEB, ID_PERMUTA, GARANTENOSHOW, FIDELIDADE, FORMA_PG, RESERVA_JAVA, ALTERANDO, COMISSAO, \nCALCULA_SEGURO, VALOR_PENSAO, OBSERVACAO_VOUCHER\nFROM RESERVA\nWHERE APAGADA = 'N' AND ID_RESERVA_GDS = ?1";
	public static final String QUERY_RESERVA_BLOQUEIO_LOOKUP = "SELECT \nRE.ID_RESERVA, RE.ID_EMPRESA, RE.ID_CENTRAL_RESERVAS, RE.ID_RESERVA_BLOQUEIO, RE.ID_HOTEL, RE.DATA_ENTRADA, RE.DATA_SAIDA, RE.DATA_RESERVA, \nRE.HORA_RESERVA, RE.DATA_CONFIRMA_BLOQUEIO, RE.BLOQUEIO, RE.DEAD_LINE, RE.CALCULA_ISS, RE.CALCULA_TAXA, RE.CALCULA_ROOMTAX, \nRE.FORMA_RESERVA, RE.CONTATO, RE.ID_CIDADE_CONTATO, RE.TELEFONE_CONTATO, RE.FAX_CONTATO, RE.EMAIL_CONTATO, RE.OBSERVACAO, RE.NOME_GRUPO, \nRE.CHECKIN, RE.TIPO_PENSAO, RE.CORTESIA, RE.GRUPO, RE.VALOR_TOTAL, RE.APAGADA, RE.CONFIRMA, RE.FLG_ALCOOLICA, RE.ID_RESERVA_MIDIA, RE.PERMUTA, \nRE.ID_CORPORATE, RE.ID_USUARIO_WEB, RE.ID_PERMUTA, RE.GARANTENOSHOW, RE.FIDELIDADE, RE.FORMA_PG, RE.RESERVA_JAVA, RE.ALTERANDO, RE.COMISSAO, \nRE.CALCULA_SEGURO, RE.VALOR_PENSAO, RE.OBSERVACAO_VOUCHER\n FROM RESERVA RE, CONTROLA_DATA CD, EMPRESA_REDE ER\n WHERE RE.BLOQUEIO = 'S' AND RE.APAGADA = 'N' \nAND RE.ID_HOTEL = CD.ID_HOTEL AND CD.ID_REDE_HOTEL = ER.ID_REDE_HOTEL AND RE.ID_EMPRESA = ER.ID_EMPRESA  AND RE.DATA_SAIDA >= CD.FRONT_OFFICE \nAND (RE.ID_RESERVA like ?1 OR UPPER(ER.NOME_FANTASIA) like ?2) AND CD.ID_HOTEL = ?3";
	public static final String QUERY_RESERVA_APARTAMENTO = "SELECT   \nRESERVA_APARTAMENTO.ID_RESERVA_APARTAMENTO, RESERVA_APARTAMENTO.ID_TIPO_APARTAMENTO, RESERVA_APARTAMENTO.ID_RESERVA, RESERVA_APARTAMENTO.QTDE_APARTAMENTO, RESERVA_APARTAMENTO.QTDE_CHECKIN,   \nRESERVA_APARTAMENTO.QTDE_PAX, RESERVA_APARTAMENTO.TARIFA, RESERVA_APARTAMENTO.JUSTIFICA_TARIFA, RESERVA_APARTAMENTO.ID_CENTRAL_RESERVAS, RESERVA_APARTAMENTO.ID_HOTEL, RESERVA_APARTAMENTO.TOTAL_TARIFA, RESERVA_APARTAMENTO.ADICIONAL,   \nRESERVA_APARTAMENTO.QTDE_CRIANCA, RESERVA_APARTAMENTO.ID_APARTAMENTO, RESERVA_APARTAMENTO.MASTER, RESERVA_APARTAMENTO.VALOR_PENSAO, RESERVA_APARTAMENTO.DATA_ENTRADA, RESERVA_APARTAMENTO.DATA_SAIDA,  \nRESERVA_APARTAMENTO.CAFE, RESERVA_APARTAMENTO.VALOR_CAFE, RESERVA_APARTAMENTO.MAP, RESERVA_APARTAMENTO.VALOR_MAP, RESERVA_APARTAMENTO.FAP,  \nRESERVA_APARTAMENTO.TARIFA_MANUAL, RESERVA_APARTAMENTO.DATA_MANUAL, RESERVA_APARTAMENTO.ID_TIPO_DIARIA,  \nAPARTAMENTO.NUM_APARTAMENTO, \nDECODE( greatest( RESERVA_APARTAMENTO.DATA_ENTRADA, CONTROLA_DATA.FRONT_OFFICE ), RESERVA_APARTAMENTO.DATA_ENTRADA, 'N', 'S') NOSHOW, \nCHECKIN.CHECKOUT, TIPO_APARTAMENTO.FANTASIA TIPO_APARTAMENTO_DESC, TIPO_DIARIA.DESCRICAO TIPO_DIARIA_DESC\nFROM RESERVA_APARTAMENTO \nLEFT JOIN APARTAMENTO ON (RESERVA_APARTAMENTO.ID_APARTAMENTO = APARTAMENTO.ID_APARTAMENTO) \nLEFT JOIN CHECKIN ON (CHECKIN.ID_RESERVA_APARTAMENTO = RESERVA_APARTAMENTO.ID_RESERVA_APARTAMENTO)  \nJOIN CONTROLA_DATA ON (RESERVA_APARTAMENTO.ID_HOTEL = CONTROLA_DATA.ID_HOTEL)\nJOIN TIPO_APARTAMENTO ON (RESERVA_APARTAMENTO.ID_TIPO_APARTAMENTO = TIPO_APARTAMENTO.ID_TIPO_APARTAMENTO)\nLEFT JOIN TIPO_DIARIA ON (RESERVA_APARTAMENTO.ID_TIPO_DIARIA = TIPO_DIARIA.ID_TIPO_DIARIA)\nWHERE RESERVA_APARTAMENTO.ID_RESERVA = ?1";
	public static final String QUERY_RESERVA_APARTAMENTO_DIARIA = "SELECT  \nDATA, ID_HOTEL, ID_RESERVA, ID_RESERVA_APARTAMENTO, \nTARIFA, JUSTIFICA_TARIFA, ID_MOEDA, \nID_RESERVA_APARTAMENTO_DIARIA\nFROM RESERVA_APARTAMENTO_DIARIA\nWHERE ID_RESERVA = ?1";
	public static final String QUERY_ROOM_LIST = "SELECT RL.ID_ROOM_LIST, RL.ID_CHECKIN, RL.ID_RESERVA, RL.ID_TIPO_HOSPEDE, TH.TIPO_HOSPEDE, RL.ID_HOTEL, \nRL.ID_CENTRAL_RESERVAS, RL.ID_HOSPEDE, RL.SEXO, RL.ID_REDE_HOTEL, H.NOME_HOSPEDE, \nH.SOBRENOME_HOSPEDE, RL.ID_TIPO_LANCAMENTO, RL.ID_RESERVA_APARTAMENTO, RL.PRINCIPAL, \nRL.CHEGOU, RL.DATA_CERTIFICADO, RL.COD_CERTIFICADO, RL.DATA_ENTRADA, RL.DATA_SAIDA \nFROM ROOM_LIST RL, HOSPEDE H, TIPO_HOSPEDE TH \nWHERE RL.ID_HOSPEDE = H.ID_HOSPEDE AND H.ID_TIPO_HOSPEDE = TH.ID_TIPO_HOSPEDE AND RL.ID_RESERVA = ?1";
	public static final String QUERY_RESERVA_GRUPO_LANCAMENTO = "SELECT \nID_CENTRAL_RESERVAS, ID_RESERVA, ID_IDENTIFICA_LANCAMENTO, \nQUEM_PAGA, ID_HOTEL, ID_EMPRESA \nFROM RESERVA_GRUPO_LANCAMENTO\nWHERE ID_RESERVA = ?1";
	public static final String QUERY_PAGAMENTO_RESERVA = "SELECT \n pr.ID_PAGAMENTO_RESERVA, pr.ID_CARTAO_CREDITO, pr.ID_TIPO_LANCAMENTO, pr.ID_RESERVA, \n pr.VALOR, pr.CONFIRMA, pr.DATA_CONFIRMA, pr.NUM_DOCUMENTO, pr.VALIDADE_CARTAO, \n pr.ID_HOTEL, pr.ID_CENTRAL_RESERVAS, pr.FORMA_PG, pr.NOME_CARTAO, pr.COD_SEGURANCA, tl.FANTASIA, r.checkin, pr.ID_MOVIMENTO_APARTAMENTO \nFROM PAGAMENTO_RESERVA pr, TIPO_LANCAMENTO tl, RESERVA r\nWHERE pr.ID_TIPO_LANCAMENTO (+)= tl.ID_TIPO_LANCAMENTO and pr.ID_RESERVA = ?1 and pr.ID_RESERVA = r.ID_RESERVA ";
	public static final String QUERY_OCUPACAO = "SELECT \nTO_CHAR(DATA,'dd/mm/yyyy')DATA, FANTASIA, VALOR, PERCENTUAL, DIASEMANA, TOTAL, TOTDIA, PERCENTDIA\nFROM TABLE (CAST(OCUPACAOGERAL(?1,?2,?3,?4)AS DISP_SET))";
	public static final String QUERY_DISPONIBILIDADE = "SELECT \nTO_CHAR(DATA,'dd/mm/yyyy')DATA, FANTASIA, VALOR, PERCENTUAL, DIASEMANA, TOTAL, TOTDIA, PERCENTDIA\nFROM TABLE (CAST(DISPONIBILIDADEGERALOTIMIZADA(?1,?2,?3,?4)AS DISP_SET))";
	public static final String QUERY_MAPA_OCUPACAO = " SELECT  DIA, DATA, FANTASIA, DIASEMANA, AP_DISPONIVEL, AP_DISPONIVEL_GERAL,  DISPONIVEL_GERAL_PERCENTUAL, AP_OCUPADO, AP_OCUPADO_GERAL, OCUPADO_GERAL_PERCENTUAL,  CONFIRMADAS_GERAL, N_CONFIRMADAS_GERAL, INTERDITADO_GERAL, NOSHOWGERAL, TOTAP,N_CONFIRMADAS_GERAL_DETALHE,QTD_TIPO_AP, QTD_CAFE_MANHA, QTD_MAP, QTD_FAP, QTD_HOSPEDE,BLOQUEIO,DETALHE_BLOQUEIO,QTDE_CRIANCAS, QTD_ALL  FROM TABLE (CAST(DISPONIBILIDADEOCUPACAOGERAL(?1,?2,?3,?4)AS DISP_OCU_SET)) order by data, fantasia";
	public static final String QUERY_OBTER_BLOQUEIO = " SELECT TRIM(ID_RESERVA)||' - '|| TRIM(DATA_ENTRADA)||' - '|| TRIM(DATA_SAIDA) IDINOUT, ID_RESERVA FROM RESERVA \nWHERE ID_HOTEL = ?1 \nAND ID_EMPRESA = ?2 \nAND TRUNC(DATA_ENTRADA) <= ?3 \nAND TRUNC(DATA_SAIDA) >= ?4 \nAND APAGADA = 'N' \nAND BLOQUEIO = 'S' \nORDER BY DATA_ENTRADA ";
	public static final String QUERY_OBTER_BLOQUEIO_GESTAO = " SELECT TRIM(ER.NOME_FANTASIA) ||' - ' || TRIM(R.ID_RESERVA) ||' - ' || TRIM(R.DATA_ENTRADA) ||' - ' || TRIM(R.DATA_SAIDA) IDINOUT, R.ID_EMPRESA, ER.NOME_FANTASIA, R.ID_RESERVA, R.DATA_ENTRADA, R.DATA_SAIDA FROM RESERVA R, CONTROLA_DATA CD, EMPRESA_REDE ER WHERE R.ID_HOTEL = CD.ID_HOTEL AND CD.ID_REDE_HOTEL = ER.ID_REDE_HOTEL AND R.ID_EMPRESA = ER.ID_EMPRESA AND R.ID_HOTEL = CD.ID_HOTEL AND CD.ID_REDE_HOTEL = ER.ID_REDE_HOTEL AND R.ID_HOTEL = ?1 AND R.APAGADA = 'N' AND R.BLOQUEIO = 'S' AND (UPPER(TRIM(ER.NOME_FANTASIA)) LIKE '%' || ?2 ||'%' OR UPPER(TRIM(R.ID_RESERVA))LIKE '%' || ?3 ||'%')   ";
	public static final String QUERY_OBTER_TARIFA_BLOQUEIO_GESTAO_PAX = " SELECT "
			+ " R.ID_EMPRESA ID_EMPRESA, "
			+ " NULL ID_TARIFA, "
			+ " RAD.ID_MOEDA, "
			+ " RAD.DATA DATA_ENTRADA, "
			+ " RAD.DATA DATA_SAIDA, "
			+ " TA.FANTASIA FANTASIA, "
			+ " RA.QTDE_PAX PAX, "
			+ " RAD.TARIFA VALOR, "
			+ " r.ID_HOTEL ID_HOTEL, "
			+ " ra.id_tipo_apartamento, "
			+ " NULL TIPO, "
			+ " ra.id_reserva_apartamento, "
			+ " rad.id_reserva_apartamento_diaria "
			+ " FROM RESERVA R JOIN RESERVA_APARTAMENTO RA ON (R.ID_RESERVA = RA.ID_RESERVA) "
			+ " JOIN RESERVA_APARTAMENTO_DIARIA RAD "
			+ " ON (ra.id_reserva_apartamento = rad.id_reserva_apartamento) "
			+ " JOIN TIPO_APARTAMENTO TA "
			+ " ON (RA.ID_TIPO_APARTAMENTO = TA.ID_TIPO_APARTAMENTO) " 
			+ " WHERE R.ID_RESERVA         = ?1 "
			+ " AND RAD.DATA  BETWEEN TO_DATE(?2, 'DD/MM/YYYY') AND TO_DATE(?3, 'DD/MM/YYYY') "
			+ " ORDER BY FANTASIA, PAX, ID_TARIFA, DATA_ENTRADA ";
	
//	public static final String QUERY_OBTER_TARIFA_BLOQUEIO_GESTAO_PAX = " SELECT "
//			+ " TARIFA_APTO_BLOQ.ID_EMPRESA, "
//			+ " TARIFA_APTO_BLOQ.ID_TARIFA, "
//			+ " TARIFA_APTO_BLOQ.ID_MOEDA, "
//			+ " TARIFA_APTO_BLOQ.DATA DATA_ENTRADA, "
//			+ " TARIFA_APTO_BLOQ.DATA DATA_SAIDA, "
//			+ " TARIFA_APTO_BLOQ.FANTASIA, "
//			+ " TARIFA_APTO_BLOQ.PAX, "
//			+ " TARIFA_APTO_BLOQ.VALOR,"
//			+ " TARIFA_APTO_BLOQ.ID_HOTEL, "
//			+ " TARIFA_APTO_BLOQ.ID_TIPO_APARTAMENTO, "
//			+ " TARIFA_APTO_BLOQ.TIPO "
//			+ " FROM TABLE (MOZART.FC_TARIFA_OTA(to_date(?1 , 'DD/MM/YYYY'),to_date(?2 , 'DD/MM/YYYY'), ?3, ?4)) TARIFA_APTO_BLOQ "
//			+ " ORDER BY "
//			+ "	TARIFA_APTO_BLOQ.FANTASIA, "
//			+ " TARIFA_APTO_BLOQ.PAX, "
//			+ " TARIFA_APTO_BLOQ.ID_TARIFA, "
//			+ " TARIFA_APTO_BLOQ.DATA ";

	public static final String QUERY_OBTER_QTD_APTO_BLOQ_POR_TIPO = " SELECT ?1 RESERVA, APELIDO.DATA,"
			+ " APELIDO.FANTASIA,"
			+ " APELIDO.VALOR, "
			+ " APELIDO.PERCENTUAL, "
			+ " APELIDO.DIASEMANA, "
			+ " APELIDO.TOTAL, "
			+ " APELIDO.TOTDIA, "
			+ " APELIDO.PERCENTDIA "
			+ " FROM TABLE ( "
			+ " FC_DISPONIBILIDADE_OTA (to_date(?2, 'DD/MM/YYYY'), to_date(?3, 'DD/MM/YYYY'), ?4, ?5) "
			+ " ) APELIDO ";	
	public static final String QUERY_OBTER_DISPONIBILIDADE_GDS = "SELECT APELIDO.DATA, "
			+ "	APELIDO.FANTASIA, APELIDO.VALOR "
			+ "	FROM TABLE (FC_DISPONIBILIDADE_GDS (TO_DATE(?1,'DD/MM/YYYY'), "
			+ " TO_DATE(?2,'DD/MM/YYYY'),?3,?4)  "
			+ " ) APELIDO "
			+ " ORDER BY data ";
	
	public static final String QUERY_OBTER_DISPONIBILIDADE_GDS_TOTAL = "SELECT APELIDO.DATA, "
			+ "	APELIDO.FANTASIA, APELIDO.VALOR "
			+ "	FROM TABLE (DISPONIBILIDADEGERALOTIMIZADA (TO_DATE(?1,'DD/MM/YYYY'), "
			+ " TO_DATE(?2,'DD/MM/YYYY'),?3,?4)  "
			+ " ) APELIDO "
			+ " ORDER BY data ";

	public static final String QUERY_OBTER_QTD_APTO_RESERVADO_BLOQ_POR_RESERVA = " SELECT RAD.DATA, "
			+ " TA.FANTASIA, "
			+ " COUNT(RA.ID_RESERVA) RESERVADOS, "
			+ " R.ID_RESERVA ID_RESERVADOS "
			+ " FROM RESERVA_APARTAMENTO_DIARIA RAD "
			+ " JOIN RESERVA R "
			+ " ON (RAD.ID_RESERVA = R.ID_RESERVA) "
			+ " JOIN RESERVA_APARTAMENTO RA "
			+ " ON (RAD.ID_RESERVA_APARTAMENTO = RA.ID_RESERVA_APARTAMENTO) "
			+ " JOIN TIPO_APARTAMENTO TA "
			+ " ON (RA.ID_TIPO_APARTAMENTO = TA.ID_TIPO_APARTAMENTO) "
			+ " WHERE RAD.ID_HOTEL         = ?1 "
			+ " AND RA.ID_RESERVA          = RA.ID_RESERVA "
			+ " AND R.ID_RESERVA_BLOQUEIO  = ?2 "
			+ " AND ( (RAD.DATA           >= ?3 "
			+ " AND RAD.DATA              <= ?4 )"
			+ " OR (RAD.DATA              <= ?5  "
			+ " AND RAD.DATA              >= ?6 ) "
			+ " OR (RAD.DATA              <= ?7 "
			+ " AND RAD.DATA              >= ?8 ) ) "
			+ " GROUP BY RAD.DATA, "
			+ " TA.FANTASIA, "
			+ " RA.ID_RESERVA, "
			+ " R.ID_RESERVA "
			+ " ORDER BY DATA, "
			+ " FANTASIA ";
	public static final String QUERY_BLOQUEIO_GESTAO = " SELECT "
			+ " R.ID_RESERVA, "
			+ " TRUNC(R.DATA_RESERVA) DATARESERVA, "
			+ " R.DEAD_LINE, "
			+ " R.DATA_CONFIRMA_BLOQUEIO DTCANCELAMENTO, "
			+ " DECODE(R.CALCULA_ISS,'S',H.ISS,'0') ISS, "
			+ " DECODE(R.CALCULA_TAXA,'S',H.TAXA_SERVICO,'0') TAXASERVICO, "
			+ " DECODE(R.CALCULA_ROOMTAX,'S',H.ROOMTAX,'0') ROOMTAX, "
			+ " DECODE(R.CALCULA_SEGURO,'S',H.SEGURO,'0') SEGURO "
			+ " FROM RESERVA R, HOTEL H "
			+ " WHERE R.ID_RESERVA = ?1 "
			+ " AND R.ID_HOTEL = H.ID_HOTEL ";
		
	public abstract List<ReservaApartamentoEJB> obterReservaApartamentoSemCheckin(
			ReservaEJB paramReservaEJB) throws MozartSessionException;

	public abstract ReservaApartamentoEJB obterReservaApartamento(
			ReservaApartamentoEJBPK paramReservaApartamentoEJBPK);

	public abstract List<ReservaVO> pesquisarReservas(ReservaVO paramReservaVO)
			throws MozartSessionException;

	public abstract List<BloqueioVO> pesquisarReservas(BloqueioVO paramReservaVO)
			throws MozartSessionException;

	public abstract EmpresaHotelVO obterEmpresaHotelPorIdEHotel(
			EmpresaHotelVO paramEmpresaHotelVO) throws MozartSessionException;

	public abstract List<TipoApartamentoVO> obterTipoApartamentoPorHotel(
			TipoApartamentoVO paramTipoApartamentoVO)
			throws MozartSessionException;

	public abstract List<TipoDiariaVO> obterTipoDiariaPorHotel(
			TipoDiariaVO paramTipoDiariaVO) throws MozartSessionException;

	public abstract List<ApartamentoVO> obterApartamentoPorDisponibilidade(
			ApartamentoVO paramApartamentoVO) throws MozartSessionException;

	public abstract TipoApartamentoVO obterTipoApartamentoPorId(
			TipoApartamentoVO paramTipoApartamentoVO)
			throws MozartSessionException;
	
	public abstract ApartamentoVO obterApartamentoPorId(
			ApartamentoVO paramApartamentoVO) throws MozartSessionException;

	public abstract TipoDiariaVO obterTipoDiariaPorId(
			TipoDiariaVO paramTipoDiariaVO) throws MozartSessionException;

	public abstract List<TarifaVO> obterTarifaPorPeriodo(
			ReservaApartamentoVO paramReservaApartamentoVO)
			throws MozartSessionException;

	public abstract List<HospedeVO> obterHospedePorNome(HospedeVO paramHospedeVO)
			throws MozartSessionException;

	public abstract HospedeVO obterHospedePorId(HospedeVO paramHospedeVO)
			throws MozartSessionException;

	public abstract EmpresaRedeVO obterEmpresaRedePorIdERede(
			EmpresaRedeVO paramEmpresaRedeVO) throws MozartSessionException;

	public abstract List<EmpresaGrupoLancamentoVO> obterEmpresaGrupoLancamentoPorHotelEEmpresa(
			EmpresaGrupoLancamentoVO paramEmpresaGrupoLancamentoVO)
			throws MozartSessionException;

	public abstract List<PagamentoReservaVO> obterTiposDePagamentoReserva(
			PagamentoReservaVO paramPagamentoReservaVO)
			throws MozartSessionException;

	public abstract void salvarReserva(ReservaVO paramReservaVO)
			throws MozartSessionException;

	public abstract Long obterNextVal() throws MozartSessionException;

	public abstract ReservaVO obterReservaPorId(ReservaVO paramReservaVO)
			throws MozartSessionException;
	
	public ReservaVO obterReservaPorIdGds(ReservaVO vo)
			throws MozartSessionException;

	public List<ReservaVO> obterBloqueioLookup(ReservaVO vo)
			throws MozartSessionException;

	public abstract List<ReservaApartamentoVO> obterReservaApartamentoPorIdReserva(
			ReservaVO paramReservaVO) throws MozartSessionException;

	public abstract List<ReservaApartamentoDiariaVO> obterReservaApartamentoDiariaPorIdReserva(
			ReservaVO paramReservaVO) throws MozartSessionException;

	public abstract List<RoomListVO> obterRoomListPorIdReserva(
			ReservaVO paramReservaVO) throws MozartSessionException;

	public abstract List<ReservaGrupoLancamentoVO> obterReservaGrupoLancamentoPorIdReserva(
			ReservaVO paramReservaVO) throws MozartSessionException;

	public abstract List<PagamentoReservaVO> obterPagamentoReservaPorIdReserva(
			ReservaVO paramReservaVO) throws MozartSessionException;

	public abstract void atualizarReserva(ReservaVO paramReservaVO)
			throws MozartSessionException;

	public abstract List<OcupDispVO> obterOcupacaoDisponibilidade(
			ReservaVO paramReservaVO) throws MozartSessionException;

	public abstract List<ReservaMapaOcupacaoVO> pesquisarMapaOcupacao(
			ReservaMapaOcupacaoVO paramReservaMapaOcupacaoVO)
			throws MozartSessionException;

	public abstract void apagarReserva(ReservaVO paramReservaVO)
			throws MozartSessionException;

	public void apagarReservaOmnibees(ReservaVO reservaVO)
			throws MozartSessionException;

	public abstract void confirmarReserva(ReservaVO paramReservaVO)
			throws MozartSessionException;

	public abstract void destravarReserva(ReservaVO paramReservaVO)
			throws MozartSessionException;

	public abstract List<ReservaVO> obterBloqueios(ReservaVO paramReservaVO)
			throws MozartSessionException;
	
	public abstract List<BloqueioGestaoVO> obterBloqueioGestaoEmpresa(EmpresaHotelEJB paramReservaVO)
			throws MozartSessionException;
	public abstract List<TarifaApartamentoGestaoBloqueioVO> obterGridTarBloqueioGestaoEmpresa(ReservaVO paramReservaVO)
			throws MozartSessionException;
	
	public abstract void salvarTarifaApartamentoGestaoBloqueioVO(TarifaApartamentoGestaoBloqueioVO pTarifaApartamentoGestaoBloqueioVO)
			throws MozartSessionException;

	public abstract void salvarReservaApartamentoGestaoBloqueioVO(TarifaApartamentoGestaoBloqueioVO pTarifaApartamentoGestaoBloqueioVO)
			throws MozartSessionException;
	
	public abstract List<QuantidadeAptoGestaoBloqueioVO> obterGridQtdAptoBloqTipo(ReservaVO paramReservaVO)
			throws MozartSessionException;
	
	public abstract List<DisponibilidadeAptoGestaoBloqueioVO> obterGridDisponibilidadeAptoBloq(ReservaVO paramReservaVO)
			throws MozartSessionException;
	
	public abstract void salvarQtdAptoBloqueio(QuantidadeAptoGestaoBloqueioVO pQuantidadeApartamentoGestaoBloqueioVO)
			throws MozartSessionException;

	public abstract BloqueioGestaoVO obterBloqueioGestaoPorId(BloqueioGestaoVO vo) throws MozartSessionException;
	
	public abstract List<DisponibilidadeGdsVO> obterDisponibilidadeGDS(DisponibilidadeGdsVO vo) throws MozartSessionException;
	
	public List<DisponibilidadeGdsVO> obterDisponibilidadeGDSTotal(DisponibilidadeGdsVO vo) throws MozartSessionException ;
	
	public BloqueioVO obterDadosGeraisEmpresaNaoParticular(Long var1, Long var2, Long var3) throws MozartSessionException;
	
	public BloqueioVO obterDadosGeraisEmpresa(Long idRedeHotel, Long idHotel) throws MozartSessionException;
	
	public abstract HotelEJB obterHotelPorCodigo(String codigoHotel) throws MozartSessionException ;

	public abstract GdsCanalVO obterGdsCanal(Long idGds, Long idEmpresa, Long idHotel, String codigo) throws MozartSessionException ;
	
	public BloqueioVO obterBloqueio(Long idHotel, Long idEmpresa, Date dataInicio, Date dataFim) throws MozartSessionException;

	public TipoApartamentoVO obterTipoApartamentoPorCodigoEOuIdHotel(String codigo, Long idHotel) throws MozartSessionException;
	
	public Double obterComissao(long idEmpresa, long idHotel) throws MozartSessionException;
	
	public TipoDiariaVO obterTipoDiariaPorHotelEPadrao(TipoDiariaVO vo)
			throws MozartSessionException;
	
	public String obterTipoPagamentoPorHotel(long idHotel) throws MozartSessionException;
	
	public String obterTipoDisponibilidade(Long idGds) throws MozartSessionException;
	public List<ReservaMidiaEJB> obterListaReservaMidia() throws MozartSessionException;
	public List obterComboApartamentoCofan(Long pIdHotel) throws MozartSessionException;
	public List<BloqueioGestaoVO> obterBloqueioGestaoEmpresa(EmpresaHotelEJB paramReservaVO, Timestamp frontOffice) throws MozartSessionException;
	public HotelVO obterEmailsCentralReserva(Long pIdHotel) throws MozartSessionException;
	
	public boolean existeCheckinAtivo(ReservaVO reservaVO) throws MozartSessionException;
}